/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.44
 * Generated at: 2025-09-04 06:05:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class signup_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("    <title>Sign Up - My App</title>\n");
      out.write("    <link rel=\"stylesheet\" href=\"css/style.css\">\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <div class=\"container\">\n");
      out.write("        <div class=\"header\">\n");
      out.write("            <h1>Create Your Account</h1>\n");
      out.write("            <p>Please fill in the details to sign up</p>\n");
      out.write("        </div>\n");
      out.write("        \n");
      out.write("        <form action=\"signup\" method=\"post\">\n");
      out.write("            <div class=\"form-group\">\n");
      out.write("                <label for=\"fullName\">Full Name</label>\n");
      out.write("                <input type=\"text\" id=\"fullName\" name=\"fullName\" required \n");
      out.write("                       placeholder=\"Enter your full name\">\n");
      out.write("            </div>\n");
      out.write("            \n");
      out.write("            <div class=\"form-group\">\n");
      out.write("                <label for=\"email\">Email</label>\n");
      out.write("                <input type=\"email\" id=\"email\" name=\"email\" required \n");
      out.write("                       placeholder=\"Enter your email\">\n");
      out.write("            </div>\n");
      out.write("            \n");
      out.write("            <div class=\"form-group\">\n");
      out.write("                <label for=\"username\">Username</label>\n");
      out.write("                <input type=\"text\" id=\"username\" name=\"username\" required \n");
      out.write("                       placeholder=\"Choose a username\">\n");
      out.write("            </div>\n");
      out.write("            \n");
      out.write("            <div class=\"form-group\">\n");
      out.write("                <label for=\"password\">Password</label>\n");
      out.write("                <input type=\"password\" id=\"password\" name=\"password\" required \n");
      out.write("                       placeholder=\"Choose a password\">\n");
      out.write("            </div>\n");
      out.write("            \n");
      out.write("            <div class=\"form-group\">\n");
      out.write("                <label for=\"confirmPassword\">Confirm Password</label>\n");
      out.write("                <input type=\"password\" id=\"confirmPassword\" name=\"confirmPassword\" required \n");
      out.write("                       placeholder=\"Confirm your password\">\n");
      out.write("            </div>\n");
      out.write("            \n");
      out.write("            <button type=\"submit\" class=\"btn\">Sign Up</button>\n");
      out.write("        </form>\n");
      out.write("        \n");
      out.write("        <div class=\"link\">\n");
      out.write("            <a href=\"login.jsp\">Already have an account? Sign In</a>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("    \n");
      out.write("    <script>\n");
      out.write("        document.querySelector('form').addEventListener('submit', function(e) {\n");
      out.write("            const fullName = document.getElementById('fullName').value;\n");
      out.write("            const email = document.getElementById('email').value;\n");
      out.write("            const username = document.getElementById('username').value;\n");
      out.write("            const password = document.getElementById('password').value;\n");
      out.write("            const confirmPassword = document.getElementById('confirmPassword').value;\n");
      out.write("\n");
      out.write("            if (fullName.length < 3) {\n");
      out.write("                e.preventDefault();\n");
      out.write("                alert('Full Name must be at least 3 characters long');\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n");
      out.write("            if (!emailPattern.test(email)) {\n");
      out.write("                e.preventDefault();\n");
      out.write("                alert('Please enter a valid email address');\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if (username.length < 3) {\n");
      out.write("                e.preventDefault();\n");
      out.write("                alert('Username must be at least 3 characters long');\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if (password.length < 6) {\n");
      out.write("                e.preventDefault();\n");
      out.write("                alert('Password must be at least 6 characters long');\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if (password !== confirmPassword) {\n");
      out.write("                e.preventDefault();\n");
      out.write("                alert('Passwords do not match');\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            const btn = document.querySelector('.btn');\n");
      out.write("            btn.textContent = 'Signing Up...';\n");
      out.write("            btn.disabled = true;\n");
      out.write("        });\n");
      out.write("    </script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
